<!--
	Copyright (c) 2014 CNES and others.
	All rights reserved. This program and the accompanying materials
	are made available under the terms of the Eclipse Public License v1.0
	which accompanies this distribution, and is available at
	http://www.eclipse.org/legal/epl-v10.html

	Contributors:
    	Cedric Notot (Obeo) - initial API and implementation
-->
= User Guide =

== Getting Started ==

=== Installing UML Generators ===

'''<pre style="color: red">PENDING</pre>'''

=== UML Design of a RTSJ application ===

Whatever the chosen graphical UML editor, you have to model your RTSJ application respecting some design rules in order that the UML data are correctly interpreted by the code generator. Besides, this allows you to be understood by all the users of this tool.

==== Services Declaration ====

The services to expose have to be defined in ''UML Interfaces''.

[[Image:./../../images/userGuideUMLInterfaces.PNG|frame]] 

According to the nature of the ''UML Interface'', these services will be modeled as ''UML Operation'' or ''UML Reception'':
* ''UML Operations'' in a simple ''UML Interface'' (synchronous).
* ''UML Receptions'' in a ''UML Interface'' stereotypes as <<Asynchronous>> or <<EventData>>.

When you create a ''UML Reception'', you have to set the '''''signal''''' property with a previously created ''UML Signal'' which contains potential ''UML Property'' parameters.

==== Component Definition ====

You can define a component definition creating a ''UML Class'' with a ''UML Port'' inside at least.

[[Image:./../../images/userGuideUMLCompDef.PNG|frame]] 

Then, on each of its input ports, you have to set the '''''type''''' property with the UML Interface which provides the services to expose through this port.

==== Component Instantiation ====

In the context of your applicative system to design, you are going to instantiate your components from the [[#Component Definition|definitions]] and to choose to make them communicate from some way.

[[Image:./../../images/userGuideUMLComponents.PNG|frame]]

Your system has to be represented by a ''UML Class'' stereotyped <<Root>>.

The instantiation of a component is modeled, in this UML Class, by a ''UML Property''  which references the component definition with the '''''type''''' property.

==== Communication between components ====

To make communicate two components through an output and input port, you have to:
* Create a ''UML Usage'' between the output and input port, with '''''client''''' set to the output port and '''''supplier''''' set to the input port.
* Create a ''UML Connector'' to connect the output port from the caller component to the input port from the receiver one. In this connector, you have to create a ''UML Connector End'' to connect the 2 ports. In each ''UML Connector End'', you have to set '''''role''''' with the ''UML Port'' to connect (from the component definition) and the '''''part with port''''' with the ''UML Property'' (concerned component instance).

==== UML Class Property as array of primitive types ====

You have to set several properties for your ''UML Property'':
* The '''''type''''' property with a UML type (UML Primitive Type e.g.)
* The '''''lower''''' property with "1" value
* The '''''upper''''' property with:
** Either a fixed number value ("5" e.g.)
** Or the value "-1" if you want to use a textual reference to a fixed number value (a constant used from the generated code). In this case, you have to set the '''''default''''' property with this textual reference.
** Or the value "-1" for an unlimited upper bound.

For example, if you want to model a "buffer" ''UML Property'', in a ''UML Class'', as an array of byte with a max size equals to ''Constants.TELECOMMAND_MAX_LENGTH'', you have to:
* Create the UML Property in your ''UML Class''
* Set its '''''name''''' with "buffer"
* Set '''''type''''' with a byte type (EDataType "Byte" e.g.)
* Set '''''lower''''' with "1"
* Set '''''upper''''' with "-1"
* Set '''''default''''' with "Constants.TELECOMMAND_MAX_LENGTH"

{| width="100%" cellspacing="10" cellpadding="0" border="0" align="center"
|-
| valign="middle" align="center" | [[Image:./../../images/userGuideUMLArrayByte.PNG|frame]] 
| valign="middle" align="center" | [[Image:./../../images/userGuideUMLArrayByte2.PNG|frame]] 
|}

So, this code will be generated:
<source lang="java">private byte[] buffer = new byte[Constants.TELECOMMAND_MAX_LENGTH];</source>

==== UML Class Property as object or array of objects ====

For a unary cardinality, you can set the '''''default''''' property with the Java code to initialize this attribute (without ";" at the end).

For example, if you want to model a "station" ''UML Property'', in a ''UML Class'', you have to:
* Create the UML Property in your ''UML Class''
* Set its '''''name''''' with "station"
* Set '''''type''''' with a Station object
* Set '''''default''''' with "new Station()"

{| width="100%" cellspacing="10" cellpadding="0" border="0" align="center"
|-
| valign="middle" align="center" | [[Image:./../../images/userGuideUMLObject.PNG|frame]] 
| valign="middle" align="center" | [[Image:./../../images/userGuideUMLObject2.PNG|frame]] 
|}

So, this code will be generated:
<source lang="java">public Station station = new Station();</source>

For a multiple cardinality, the '''''default''''' property has to be used to define the size of the array (like [[#UML_Class_Property_as_array_of_primitive_types|the primitive types]]). In this case, the '''''aggregation''''' property has to be set as "Composite".

For example, if you want to model a "stations" ''UML Property'', in a UML Class, as an array of Station with a max size equals to ''Constants.MISSION_HDSTATIONLIST_LENGTH'', you have to:
* Create the UML Property in your UML Class
* Set its '''''name''''' with "stations"
* Set '''''type''''' with a Station object
* Set '''''lower''''' with "1"
* Set '''''upper''''' with "-1"
* Set '''''default''''' with "Constants.MISSION_HDSTATIONLIST_LENGTH"
* Set '''''aggregation''''' with "Composite"

{| width="100%" cellspacing="10" cellpadding="0" border="0" align="center"
|-
| valign="middle" align="center" | [[Image:./../../images/userGuideUMLArrayObject.PNG|frame]] 
| valign="middle" align="center" | [[Image:./../../images/userGuideUMLArrayObject2.PNG|frame]] 
|}

So, this code will be generated:
<source lang="java">
@part
public Station[] stations = new Station[Constants.MISSION_HDSTATIONLIST_LENGTH];
{
	for (int i = 0; i < stations.length; i++) {
		stations[i] = new Station();
	}
}
</source>

==== State machines ====

A ''UML State Machine'' can be created on any ''UML Class''.

'''<pre style="color: red">PENDING</pre>'''

==== Communication Protocol Configuration ====

To apply an Ethernet configuration on your UML model for the code generation, you have to create an ETH model:

File > New > Other... > Example EMF Model Creation Wizards > Eth Model

{| width="100%" cellspacing="10" cellpadding="0" border="0" align="center"
|-
| valign="middle" align="center" | [[Image:./../../images/userGuideWizardEth.PNG]] 
| valign="middle" align="center" | [[Image:./../../images/userGuideWizardEth2.PNG]] 
|}

Then, you have to load the resource related to the UML model you want to configure, from this ETH model:

Right click on the background of the ETH model editor > Load Resource...

[[Image:./../../images/userGuideWizardEth3.PNG]]

Then, select the ''UML Connectors'' you want to apply an Ethernet configuration:

{| width="100%" cellspacing="10" cellpadding="0" border="0" align="center"
|-
| valign="middle" align="center" | [[Image:./../../images/userGuideWizardEth4.PNG]] 
| valign="middle" align="center" | [[Image:./../../images/userGuideWizardEth5.PNG]] 
|}

<code>Note: The label of the displayed ''UML Connectors'' could be improved. The component instance name should be displayed instead of the component definition one.</code>

Then, create an Ethernet container to address your component instances concerned by this kind of communication:

[[Image:./../../images/userGuideWizardEth6.PNG]]

Then, define the related components to locate under this Ethernet container and specify the IP Address and port number:

{| width="100%" cellspacing="10" cellpadding="0" border="0" align="center"
|-
| valign="middle" align="center" | [[Image:./../../images/userGuideWizardEth7.PNG]] 
| valign="middle" align="center" | [[Image:./../../images/userGuideWizardEth8.PNG]] 
|}

Only the components concerned by an Ethernet connector will be proposed on the left side of this wizard.

=== Launching a code generation ===

2 steps are required to launch a code generation:
* Configure this one specifying the input UML model, the potential configuration ETH model, the location of the generated code and if you wish to validate the UML model before generating. For that:

 Right click on the UML model you want to take as input of the generation > Properties > Uml2AutojavaComponent section. 

 This configuration will be stored on the current workspace. So, it will be saved for next generations.

* Execute this one:

 Right click on the UML model you want to take as input of the generation. Then, you have the choice between 3 options:
 1. Generate Autojava Components (only communication) : It generates only the code related to the communication between the component instances.
 2. Generate Autojava Components (only components) : It generates only the code related to the components themselves.
 3. Generate Autojava Components (All) : It generates the 2 parts.

== Stereotypes applicable with the RTSJ profile ==

=== On a UML Package ===

* '''openNameSpace''' : '''<pre style="color: red">PENDING</pre>'''

=== On a UML Interface ===

* '''EventData''' : It allows to define the services from a ''UML Interface'' as "event Data" services.
* '''Asynchronous''' : It allows to define the services from a ''UML Interface'' as asynchronous services.

=== On a UML Class ===

* '''Root''' : It allows to define a ''UML Class'' as the container of your applicative system to design. This ''UML Class'' contains the set of the component instances to make communicate.
* '''Message''' : '''<pre style="color: red">PENDING</pre>'''
* '''Synchronized''' : '''<pre style="color: red">PENDING</pre>'''
* '''Equipment''' : '''<pre style="color: red">PENDING</pre>'''
* ThreadInfo :
** '''Aperiodic''' : '''<pre style="color: red">PENDING</pre>'''
** '''Periodic''' : '''<pre style="color: red">PENDING</pre>'''
** '''Sporadic''' : '''<pre style="color: red">PENDING</pre>'''
** '''Background''' : '''<pre style="color: red">PENDING</pre>'''

=== On a UML Property ===

* '''NotSerialized''' : '''<pre style="color: red">PENDING</pre>'''
* ThreadInfo (see [[#On_a_UML_Class]])

=== On a UML Operation ===

* '''MethInfo''' : '''<pre style="color: red">PENDING</pre>'''

=== On a UML Reception ===

* '''EventDataBuffer''' : It has to be applied on an asynchronous service (''UML Reception'') from an "event data" ''UML Interface''. It allows to specify the size of the buffer of this reception.

=== On a UML Port ===

* BufferInfo : 
** '''ExactBuffer''' : '''<pre style="color: red">PENDING</pre>'''
** '''LossyBuffer''' : '''<pre style="color: red">PENDING</pre>'''
* PortInfo : 
** '''PeriodicPort''' : '''<pre style="color: red">PENDING</pre>'''
** '''SporadicPort''' : '''<pre style="color: red">PENDING</pre>'''
** '''BurstPort''' : '''<pre style="color: red">PENDING</pre>'''